import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class WeatherDetailsPage extends StatefulWidget {
  const WeatherDetailsPage({super.key});

  @override
  State<WeatherDetailsPage> createState() => _WeatherDetailsPageState();
}

class _WeatherDetailsPageState extends State<WeatherDetailsPage> {
  final TextEditingController _cityController = TextEditingController();

  final List<String> stages = [
    '‡§™‡•á‡§∞‡§£‡•Ä', '‡§Ö‡§Ç‡§ï‡•Å‡§∞‡§£', '‡§µ‡§æ‡§¢‡•Ä‡§ö‡§æ ‡§ü‡§™‡•ç‡§™‡§æ', '‡§´‡•Ç‡§≤‡§ß‡§æ‡§∞‡§£', '‡§´‡§≥‡§ß‡§æ‡§∞‡§£', '‡§™‡§∞‡§ø‡§™‡§ï‡•ç‡§µ‡§§‡§æ', '‡§ï‡§æ‡§™‡§£‡•Ä'
  ];
  final List<String> crops = ['‡§ó‡§π‡•Ç', '‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥', '‡§Æ‡§ï‡§æ', '‡§ï‡§æ‡§™‡•Ç‡§∏', '‡§ü‡•ã‡§Æ‡•Ö‡§ü‡•ã'];

  String? selectedStage;
  String? selectedCrop;
  Map<String, dynamic>? weatherData;
  Map<String, dynamic>? advisoryData;
  bool _loading = false;
  String? _error;

  Future<void> _fetchWeatherOnly() async {
    final city = _cityController.text.trim();
    if (city.isEmpty) {
      setState(() => _error = '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡§π‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ.');
      return;
    }

    setState(() {
      _loading = true;
      _error = null;
      weatherData = null;
    });

    try {
      final response = await http.get(
        Uri.parse('https://krushi-ai.onrender.com/weather/current?city=$city'),
      );
      if (response.statusCode == 200) {
        setState(() => weatherData = jsonDecode(response.body));
      } else {
        setState(() => _error = '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä.');
      }
    } catch (e) {
      setState(() => _error = '‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: $e');
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _fetchAdvisoryOnly() async {
    final city = _cityController.text.trim();
    if (city.isEmpty || selectedCrop == null || selectedStage == null) {
      setState(() => _error = '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§≠‡§∞‡§æ (‡§∂‡§π‡§∞, ‡§™‡•Ä‡§ï, ‡§ü‡§™‡•ç‡§™‡§æ).');
      return;
    }

    setState(() {
      _loading = true;
      _error = null;
      advisoryData = null;
    });

    try {
      final response = await http.get(
        Uri.parse('https://krushi-ai.onrender.com/weather/advisory?crop=$selectedCrop&stage=$selectedStage&city=$city'),
      );
      if (response.statusCode == 200) {
        setState(() => advisoryData = jsonDecode(response.body));
      } else {
        setState(() => _error = '‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä.');
      }
    } catch (e) {
      setState(() => _error = '‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: $e');
    } finally {
      setState(() => _loading = false);
    }
  }

  Widget _buildWeatherCard(String title, String value, Color color, IconData icon) {
    return Expanded(
      child: Card(
        color: color.withOpacity(0.1),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(value, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: color)),
              const SizedBox(height: 4),
              Text(title, style: const TextStyle(color: Colors.black54)),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ü‡§£‡§ø ‡§∏‡§≤‡•ç‡§≤‡§æ'),
        backgroundColor: Colors.green,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('‡§∂‡§π‡§∞', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
            const SizedBox(height: 4),
            const Text('‡§∂‡§π‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≤‡§ø‡§π‡§æ'),
            const SizedBox(height: 16),
            TextField(
              controller: _cityController,
              decoration: InputDecoration(
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
                filled: true,
              ),
            ),
            const SizedBox(height: 10),
            ElevatedButton.icon(
              onPressed: _fetchWeatherOnly,
              icon: const Icon(Icons.cloud),
              label: const Text('‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Æ‡§ø‡§≥‡§µ‡§æ'),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.black),
            ),

            const SizedBox(height: 24),
            if (_loading) const Center(child: CircularProgressIndicator()),
            if (_error != null)
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8),
                child: Text(_error!, style: const TextStyle(color: Colors.red)),
              ),

            if (weatherData != null) ...[
              const Text('‡§∏‡§¶‡•ç‡§Ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
              const SizedBox(height: 12),
              Row(
                children: [
                  _buildWeatherCard('‡§§‡§æ‡§™‡§Æ‡§æ‡§®', '${weatherData!['‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)']}¬∞C', Colors.blue, Icons.thermostat),
                  const SizedBox(width: 10),
                  _buildWeatherCard('‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ', '${weatherData!['‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ']}%', Colors.green, Icons.water_drop),
                ],
              ),
              const SizedBox(height: 10),
              Row(
                children: [
                  _buildWeatherCard('‡§¶‡•É‡§∑‡•ç‡§Ø‡§§‡§æ', weatherData!['‡§¶‡•É‡§∑‡•ç‡§Ø‡§§‡§æ'] ?? 'N/A', Colors.orange, Icons.remove_red_eye),
                  const SizedBox(width: 10),
                  _buildWeatherCard('‡§µ‡§æ‡§∞‡§æ', weatherData!['‡§µ‡§æ‡§∞‡§æ'] ?? 'N/A', Colors.purple, Icons.air),
                ],
              ),
              const SizedBox(height: 10),
              if (weatherData!['‡§µ‡§∞‡•ç‡§£‡§®'] != null)
                Text('üå§Ô∏è ‡§µ‡§∞‡•ç‡§£‡§®: ${weatherData!['‡§µ‡§∞‡•ç‡§£‡§®']}', style: const TextStyle(fontSize: 16)),
            ],

            const SizedBox(height: 30),
            const Text('‡§™‡§ø‡§ï ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
            const Text('‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§ø‡§ï‡§æ‡§∏‡§æ‡§†‡•Ä ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ'),
            const SizedBox(height: 16),

            DropdownButtonFormField<String>(
              value: selectedCrop,
              hint: const Text('‡§™‡•Ä‡§ï ‡§®‡§ø‡§µ‡§°‡§æ'),
              decoration: const InputDecoration(border: OutlineInputBorder()),
              items: crops.map((crop) => DropdownMenuItem(value: crop, child: Text(crop))).toList(),
              onChanged: (val) => setState(() => selectedCrop = val),
            ),
            const SizedBox(height: 10),

            DropdownButtonFormField<String>(
              value: selectedStage,
              hint: const Text('‡§ü‡§™‡•ç‡§™‡§æ ‡§®‡§ø‡§µ‡§°‡§æ'),
              decoration: const InputDecoration(border: OutlineInputBorder()),
              items: stages.map((stage) => DropdownMenuItem(value: stage, child: Text(stage))).toList(),
              onChanged: (val) => setState(() => selectedStage = val),
            ),
            const SizedBox(height: 10),

            ElevatedButton.icon(
              onPressed: _fetchAdvisoryOnly,
              icon: const Icon(Icons.refresh),
              label: const Text('‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ'),
              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            ),

            const SizedBox(height: 20),
            if (advisoryData != null)
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text('‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 8),
                  Text(advisoryData!['‡§∏‡§≤‡•ç‡§≤‡§æ']?.join('\n') ?? '‡§∏‡§≤‡•ç‡§≤‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä.',
                      style: const TextStyle(fontSize: 16)),
                ],
              ),
          ],
        ),
      ),
    );
  }
}
