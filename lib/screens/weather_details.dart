import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:dropdown_button2/dropdown_button2.dart';

class WeatherDetailsPage extends StatefulWidget {
  const WeatherDetailsPage({super.key});

  @override
  State<WeatherDetailsPage> createState() => _WeatherDetailsPageState();
}

class _WeatherDetailsPageState extends State<WeatherDetailsPage> {
  final TextEditingController _cityController = TextEditingController();

  final List<String> stages = [
    '‡§¨‡•Ä‡§ú‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ',
    '‡§™‡•á‡§∞‡§£‡•Ä',
    '‡§Ö‡§Ç‡§ï‡•Å‡§∞‡§£',
    '‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï ‡§µ‡§æ‡§¢',
    '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§µ‡§æ‡§¢‡•Ä‡§ö‡§æ ‡§ü‡§™‡•ç‡§™‡§æ',
    '‡§´‡•Å‡§≤‡•ã‡§∞‡§æ',
    '‡§´‡§≥‡§ß‡§æ‡§∞‡§£‡§æ',
    '‡§™‡§∞‡§ø‡§™‡§ï‡•ç‡§µ‡§§‡§æ',
    '‡§ï‡§æ‡§™‡§£‡•Ä',
    '‡§∂‡•á‡§§‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§®',
  ];

  final List<String> crops = ["‡§ó‡§π‡•Ç",
    "‡§§‡§æ‡§Ç‡§¶‡•Ç‡§≥ (‡§≠‡§æ‡§§)",
    "‡§Æ‡§ï‡§æ",
    "‡§ú‡§µ (‡§¨‡§æ‡§∞‡•ç‡§≤‡•Ä)",
    "‡§ú‡•ç‡§µ‡§æ‡§∞‡•Ä",
    "‡§¨‡§æ‡§ú‡§∞‡•Ä",
    "‡§®‡§æ‡§ö‡§£‡•Ä (‡§∞‡§æ‡§ó‡•Ä)",
    "‡§ì‡§ü‡•ç‡§∏",
    "‡§π‡§∞‡§≠‡§∞‡§æ (‡§ö‡§®‡§æ)",
    "‡§§‡•Ç‡§∞ (‡§Ö‡§∞‡§π‡§∞)",
    "‡§Æ‡•Ç‡§ó",
    "‡§â‡§°‡•Ä‡§¶",
    "‡§Æ‡§∏‡•Ç‡§∞",
    "‡§Æ‡§ü‡§æ‡§∞",
    "‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®",
    "‡§∂‡•á‡§Ç‡§ó‡§¶‡§æ‡§£‡§æ",
    "‡§Æ‡•ã‡§π‡§∞‡•Ä",
    "‡§∏‡•Ç‡§∞‡•ç‡§Ø‡§´‡•Ç‡§≤",
    "‡§§‡•Ä‡§≥",
    "‡§è‡§∞‡§Ç‡§°‡•Ä",
    "‡§Ü‡§Ç‡§¨‡§æ",
    "‡§ï‡•á‡§≥‡§Ç",
    "‡§∏‡§´‡§∞‡§ö‡§Ç‡§¶",
    "‡§¶‡•ç‡§∞‡§æ‡§ï‡•ç‡§∑‡•á",
    "‡§™‡•á‡§∞‡•Ç",
    "‡§∏‡§Ç‡§§‡•ç‡§∞‡§Ç",
    "‡§™‡§™‡§à",
    "‡§°‡§æ‡§≥‡§ø‡§Ç‡§¨",
    "‡§ü‡•ã‡§Æ‡•Ö‡§ü‡•ã",
    "‡§¨‡§ü‡§æ‡§ü‡§æ",
    "‡§ï‡§æ‡§Ç‡§¶‡§æ",
    "‡§µ‡§æ‡§Ç‡§ó‡•Ä",
    "‡§ï‡•ã‡§¨‡•Ä",
    "‡§´‡•Å‡§≤‡§ï‡•ã‡§¨‡•Ä",
    "‡§≠‡•á‡§Ç‡§°‡•Ä",
    "‡§™‡§æ‡§≤‡§ï",
    "‡§ï‡§æ‡§™‡•Ç‡§∏",
    "‡§ä‡§∏",
    "‡§§‡§Ç‡§¨‡§æ‡§ñ‡•Ç",
    "‡§ö‡§π‡§æ",
    "‡§ï‡•â‡§´‡•Ä",
    "‡§®‡§æ‡§∞‡§≥",
    "‡§∞‡§¨‡§∞",
    "‡§π‡§≥‡§¶",
    "‡§Ü‡§≤‡•á",
    "‡§≤‡§∏‡•Ç‡§£",
    "‡§Æ‡§ø‡§∞‡§ö‡•Ä",
    "‡§ß‡§£‡•á",
    "‡§µ‡•á‡§≤‡§¶‡•ã‡§°‡§æ",
    "‡§ï‡§æ‡§≥‡•Ä ‡§Æ‡§ø‡§∞‡•Ä",
    ];

  String? selectedStage;
  String? selectedCrop;
  Map<String, dynamic>? weatherData;
  Map<String, dynamic>? advisoryData;
  bool _loading = false;
  String? _error;

  Future<void> _fetchWeatherOnly() async {
    final city = _cityController.text.trim();
    if (city.isEmpty) {
      setState(() => _error = '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∂‡§π‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≠‡§∞‡§æ.');
      return;
    }

    setState(() {
      _loading = true;
      _error = null;
      weatherData = null;
    });

    try {
      final response = await http.get(
        // Uri.parse('https://krushi-ai.onrender.com/weather/current?city=$city'),
        Uri.parse('http://3.110.37.119:8000/weather/current?city=$city'),
      );
      if (response.statusCode == 200) {
        setState(() => weatherData = jsonDecode(response.body));
      } else {
        setState(() => _error = '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä.');
      }
    } catch (e) {
      setState(() => _error = '‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: $e');
    } finally {
      setState(() => _loading = false);
    }
  }

  Future<void> _fetchAdvisoryOnly() async {
    final city = _cityController.text.trim();
    if (city.isEmpty || selectedCrop == null || selectedStage == null) {
      setState(() => _error = '‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§≠‡§∞‡§æ (‡§∂‡§π‡§∞, ‡§™‡•Ä‡§ï, ‡§ü‡§™‡•ç‡§™‡§æ).');
      return;
    }

    setState(() {
      _loading = true;
      _error = null;
      advisoryData = null;
    });

    try {
      final response = await http.get(
        Uri.parse(
          // 'https://krushi-ai.onrender.com/weather/advisory?crop=$selectedCrop&stage=$selectedStage&city=$city',
          'http://3.110.37.119:8000/weather/advisory?crop=$selectedCrop&stage=$selectedStage&city=$city',
        ),
      );
      if (response.statusCode == 200) {
        setState(() => advisoryData = jsonDecode(response.body));
      } else {
        setState(() => _error = '‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä.');
      }
    } catch (e) {
      setState(() => _error = '‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: $e');
    } finally {
      setState(() => _loading = false);
    }
  }

  Widget _buildWeatherCard(
    String title,
    String value,
    Color color,
    IconData icon,
  ) {
    return Expanded(
      child: Card(
        color: color.withOpacity(0.1),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              Icon(icon, color: color, size: 32),
              const SizedBox(height: 8),
              Text(
                value,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: color,
                ),
              ),
              const SizedBox(height: 4),
              Text(title, style: const TextStyle(color: Colors.black54)),
            ],
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ü‡§£‡§ø ‡§∏‡§≤‡•ç‡§≤‡§æ'),
        backgroundColor: Colors.green,
      ),
      body: Stack(
        children: [
          AbsorbPointer(
            absorbing: _loading, // üëà disables all UI interaction when true
            child: Opacity(
              opacity: _loading ? 0.5 : 1.0, // üëà dims UI during loading
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '‡§∂‡§π‡§∞',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    const Text('‡§∂‡§π‡§∞‡§æ‡§ö‡•á ‡§®‡§æ‡§µ ‡§≤‡§ø‡§π‡§æ'),
                    const SizedBox(height: 16),
                    TextField(
                      controller: _cityController,
                      decoration: InputDecoration(
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        filled: false,
                      ),
                    ),
                    const SizedBox(height: 10),
                    ElevatedButton.icon(
                      onPressed: _fetchWeatherOnly,
                      icon: const Icon(Icons.cloud, color: Colors.white),
                      label: const Text(
                        '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Æ‡§ø‡§≥‡§µ‡§æ',
                        style: TextStyle(color: Colors.white),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                      ),
                    ),
                    const SizedBox(height: 24),

                    if (_loading)
                      const Center(child: CircularProgressIndicator()),
                    if (_error != null)
                      Padding(
                        padding: const EdgeInsets.symmetric(vertical: 8),
                        child: Text(
                          _error!,
                          style: const TextStyle(color: Colors.red),
                        ),
                      ),

                    if (weatherData != null) ...[
                      const Text(
                        '‡§∏‡§¶‡•ç‡§Ø ‡§π‡§µ‡§æ‡§Æ‡§æ‡§®',
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          _buildWeatherCard(
                            '‡§§‡§æ‡§™‡§Æ‡§æ‡§®',
                            '${weatherData!['‡§§‡§æ‡§™‡§Æ‡§æ‡§® (¬∞C)']}¬∞C',
                            Colors.blue,
                            Icons.thermostat,
                          ),
                          const SizedBox(width: 10),
                          _buildWeatherCard(
                            '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ',
                            '${weatherData!['‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ']}%',
                            Colors.green,
                            Icons.water_drop,
                          ),
                        ],
                      ),
                      const SizedBox(height: 10),
                      Row(
                        children: [
                          _buildWeatherCard(
                            '‡§¶‡•É‡§∑‡•ç‡§Ø‡§§‡§æ',
                            weatherData!['‡§¶‡•É‡§∑‡•ç‡§Ø‡§§‡§æ'] ?? 'N/A',
                            Colors.orange,
                            Icons.remove_red_eye,
                          ),
                          const SizedBox(width: 10),
                          _buildWeatherCard(
                            '‡§µ‡§æ‡§∞‡§æ',
                            weatherData!['‡§µ‡§æ‡§∞‡§æ'] ?? 'N/A',
                            Colors.purple,
                            Icons.air,
                          ),
                        ],
                      ),
                      const SizedBox(height: 10),
                      if (weatherData!['‡§µ‡§∞‡•ç‡§£‡§®'] != null)
                        Text(
                          'üå§Ô∏è ‡§µ‡§∞‡•ç‡§£‡§®: ${weatherData!['‡§µ‡§∞‡•ç‡§£‡§®']}',
                          style: const TextStyle(fontSize: 16),
                        ),
                    ],

                    const SizedBox(height: 30),
                    const Text(
                      '‡§™‡§ø‡§ï ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Text('‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§ø‡§ï‡§æ‡§∏‡§æ‡§†‡•Ä ‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ'),
                    const SizedBox(height: 16),

                    DropdownButtonFormField<String>(
                      value: selectedCrop,
                      decoration: InputDecoration(
                        labelText: '‡§™‡•Ä‡§ï ‡§®‡§ø‡§µ‡§°‡§æ',
                        labelStyle: const TextStyle(
                          fontSize: 16,
                          color: Colors.black87,
                        ),
                        filled: true,
                        fillColor: Colors.white,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 14,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.grey,
                            width: 1.2,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.grey,
                            width: 1.2,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.green,
                            width: 1.5,
                          ),
                        ),
                        isDense: true,
                      ),
                      icon: const Icon(
                        Icons.keyboard_arrow_down_rounded,
                        size: 32, // Bigger arrow
                        color: Colors.black54,
                      ),
                      dropdownColor: Colors.white,
                      items:
                          crops.map((item) {
                            return DropdownMenuItem<String>(
                              value: item,
                              child: Text(
                                item,
                                style: const TextStyle(fontSize: 16),
                              ),
                            );
                          }).toList(),
                      onChanged:
                          (value) => setState(() => selectedCrop = value),
                      selectedItemBuilder:
                          (context) =>
                              crops
                                  .map(
                                    (item) => Text(
                                      item,
                                      style: const TextStyle(fontSize: 16),
                                    ),
                                  )
                                  .toList(),
                      menuMaxHeight: 200,
                      // Gray scrollbar workaround: see crop_disease_detection.dart for advanced control
                    ),

                    const SizedBox(height: 10),

                    DropdownButtonFormField<String>(
                      value: selectedStage,
                      decoration: InputDecoration(
                        labelText: '‡§ü‡§™‡•ç‡§™‡§æ ‡§®‡§ø‡§µ‡§°‡§æ',
                        labelStyle: const TextStyle(
                          fontSize: 16,
                          color: Colors.black87,
                        ),
                        filled: true,
                        fillColor: Colors.white,
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 14,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.grey,
                            width: 1.2,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.grey,
                            width: 1.2,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: const BorderSide(
                            color: Colors.green,
                            width: 1.5,
                          ),
                        ),
                        isDense: true,
                      ),
                      icon: const Icon(
                        Icons.keyboard_arrow_down_rounded,
                        size: 32, // Bigger arrow
                        color: Colors.black54,
                      ),
                      dropdownColor: Colors.white,
                      items:
                          stages.map((item) {
                            return DropdownMenuItem<String>(
                              value: item,
                              child: Text(
                                item,
                                style: const TextStyle(fontSize: 16),
                              ),
                            );
                          }).toList(),
                      onChanged:
                          (value) => setState(() => selectedStage = value),
                      selectedItemBuilder:
                          (context) =>
                              stages
                                  .map(
                                    (item) => Text(
                                      item,
                                      style: const TextStyle(fontSize: 16),
                                    ),
                                  )
                                  .toList(),
                      menuMaxHeight: 200,
                      // Gray scrollbar workaround: see crop_disease_detection.dart for advanced control
                    ),

                    const SizedBox(height: 10),

                    ElevatedButton.icon(
                      onPressed: _fetchAdvisoryOnly,
                      icon: const Icon(Icons.refresh, color: Colors.white),
                      label: const Text(
                        '‡§∏‡§≤‡•ç‡§≤‡§æ ‡§Æ‡§ø‡§≥‡§µ‡§æ',
                        style: TextStyle(color: Colors.white),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green,
                      ),
                    ),

                    const SizedBox(height: 20),
                    if (advisoryData != null)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            '‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§∏‡§≤‡•ç‡§≤‡§æ',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            advisoryData!['‡§∏‡§≤‡•ç‡§≤‡§æ']?.join('\n') ??
                                '‡§∏‡§≤‡•ç‡§≤‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä.',
                            style: const TextStyle(fontSize: 16),
                          ),
                        ],
                      ),
                  ],
                ),
              ),
            ),
          ),

          // üîÑ Centered loader only when _loading is true
          if (_loading) const Center(child: CircularProgressIndicator()),
        ],
      ),
    );
  }
}
